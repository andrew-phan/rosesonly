<?php

class Ant_Advancereports_Block_Adminhtml_Order_Grid extends Mage_Adminhtml_Block_Widget_Grid {

    public function __construct() {
        parent::__construct();
        $this->setTemplate('advancereports/grid.phtml');
        $this->setId('orderGrid');        
        $this->setDefaultSort('created_at');
        $this->setDefaultDir('ASC');
        //$this->setSaveParametersInSession(true);
        $this->setSubReportSize(false);
    }
        
    protected function _getCollectionClass() {
        return 'sales/order_collection';
    }

    

    /**
     * Set order
     *
     * @param string $attribute
     * @param string $dir
     * @return Mage_Reports_Model_Resource_Product_Collection
     */
    public function setOrder($attribute, $dir = self::SORT_ORDER_DESC)
    {
        if (in_array($attribute, array('carts', 'orders', 'ordered_qty'))) {
            $this->getSelect()->order($attribute . ' ' . $dir);
        } else {
            parent::setOrder($attribute, $dir);
        }

        return $this;
    }
    protected function _prepareCollection() {
        $collection = Mage::getResourceModel($this->_getCollectionClass());   

        $collection->getSelect()
                ->joinLeft(array('antl' => 'ant_latepayment'), 'antl.order_id = main_table.entity_id', array('antl.latestatus'))
                ->joinLeft(array('mwo' => 'mw_onestepcheckout'), 'mwo.sales_order_id = main_table.entity_id', array('mwo.mw_deliverydate_date', 'mwo.mw_customercomment_info'))
                ->joinLeft(array('sfog' => 'sales_flat_order_grid'), 'sfog.entity_id = main_table.entity_id', array('sfog.shipping_name', 'sfog.billing_name', 'sfog.is_draft'))
                ->joinLeft(array('sfop' => 'sales_flat_order_payment'), 'sfop.parent_id = main_table.entity_id', array('sfop.method'))
                ->joinLeft(array('sfoa' => 'sales_flat_order_address'), 'sfoa.parent_id=main_table.entity_id AND sfoa.address_type="shipping"', array('sfoa.postcode', 'sfoa.street'))
                ->joinLeft(array('sfig' => 'sales_flat_invoice_grid'), 'sfig.order_increment_id = main_table.increment_id', array('sfig.increment_id as invoice'))
                ->joinLeft(array('sfoi' => 'sales_flat_order_item'), 'sfoi.order_id = main_table.entity_id AND product_type="bundle"', array('sfoi.product_id', 'sfoi.sku'))
                ->joinLeft(array('product' => 'catalog_product_entity'), 'product.entity_id = sfoi.product_id', array('product.sku'))
                ;

        $collection
                //->addAttributeToSelect(array('entity_id'))
                ->addAttributeToSort('entity_id', 'DESC')
                ->addFieldToFilter('customer_id', array('neq' => 'NULL'))
                // Hau Vo: if order is draft (is_draft == 1), don't show it
                ->addFieldToFilter('sfog.is_draft',array('eq' => '0'));
        
        $this->setCollection($collection);
        return parent::_prepareCollection();       
    }

    protected function _prepareColumns() {
        
        $this->addColumn('created_at', array(
            'header' => 'Sales date',
            'index' => 'created_at',
            'type' => 'date',
            'filter_index' => 'main_table.created_at',
        ));
        
        $this->addColumn('invoice_no', array(
            'header' => 'Invoice No',
            'index' => 'invoice',
            'filter_index' => 'sfig.increment_id',
        ));

        $this->addColumn('increment_id', array(
            'header' => Mage::helper('reports')->__('RO Sales Order'),
            'index' => 'increment_id',
            'filter_index' => 'main_table.increment_id',
        ));

        $this->addColumn('billing_name', array(
            'header' => Mage::helper('reports')->__("Sender's Name"),
            'index' => 'billing_name',
            'filter_index' => 'sfog.billing_name'
        ));

        $this->addColumn('sku', array(
            'header' => Mage::helper('core')->__('Product'),
            'index' => 'sku',
            'filter_index' => 'product.sku'
        ));
        
        
        $addon = array();
        $collection = Mage::getModel('catalog/product')->getCollection()
                ->addAttributeToFilter('type_id', array('eq' => 'bundle'));

        foreach ($collection as $key => $product) {
            $bundled_product = new Mage_Catalog_Model_Product();
            $bundled_product->load($product->getId());

            $selectionCollection = $bundled_product->getTypeInstance(true)->getSelectionsCollection(
                    $bundled_product->getTypeInstance(true)->getOptionsIds($bundled_product), $bundled_product
            );
            $addon_name = '';
            foreach ($selectionCollection as $option) {
                $item = Mage::getModel('catalog/product')->load($option->product_id);
                if ($item->getAdditional() != 1) {
                    $addon_name .= $item->getName() . ' ';
                }
            }
            $addon[$bundled_product->getSku()] = $addon_name;
        }

        //print_r($addon);

        $this->addColumn('add_on', array(
            'header' => Mage::helper('core')->__('Add On'),
            'index' => 'sku',
            'filter_index' => 'product.sku',
            'type' => 'options',
            'options' => $addon
        ));
 
        $order_items = Mage::getModel('sales/order_item')->getCollection()
                ->addFieldToFilter('product_type', array('eq' => 'bundle'));

        $colors = array();
        $stalks = array();
        foreach ($order_items as $key => $item) {
            $colorStr = explode ('-', $item->sku);

            if (sizeof($colorStr) > 1) {
                $SKU = '';
                for ($index = 0; $index < sizeof($colorStr) - 1; $index++) {
                    if ($index > 0)
                        $SKU .='-';
                    $SKU.=$colorStr[$index];
                }
                $colors[$SKU] = $colorStr[sizeof($colorStr) - 1];
            }

            $stalk = 0;
            for ($count = 1; $count <= 3; $count++) {
                $simple = Mage::getModel('sales/order_item')->load($item->item_id + $count);
                $pos = strrpos($simple->getName(), "stalk");
                if ($pos != FALSE) {
                    //echo $simple->getName();
                    $stalk = $stalk + $simple->getQtyOrdered();
                }
            }
            $stalks[$SKU] = $stalk;
        }

        $this->addColumn('stalk', array(
            'header' => Mage::helper('core')->__('Stalk'),
            'index' => 'sku',
            'filter_index' => 'product.sku',
            'type' => 'options',
            'options' => $stalks,
        ));

        $this->addColumn('color', array(
            'header' => Mage::helper('core')->__('Color'),
            'index' => 'sku',
            'filter_index' => 'product.sku',
            'type' => 'options',
            'options' => $colors,
        ));

        $this->addColumn('occasion', array(
            'header' => Mage::helper('core')->__('Occasion'),
        ));

        $this->addColumn('remark', array(
            'header' => Mage::helper('core')->__('Remarks'),
            'index'=>'mw_customercomment_info',
            'filter_index' => 'mwo.mw_customercomment_info',
        ));

        $this->addColumn('mw_deliverydate_date', array(
            'header' => Mage::helper('core')->__('Del Date'),
            'type' => 'date',
            'index' => 'mw_deliverydate_date',
            'filter_index' => 'mwo.mw_deliverydate_date',
        ));

        $this->addColumn('del_zone', array(
            'header' => Mage::helper('core')->__('Del Zone'),
        ));

        $shipments = Mage::getResourceModel('sales/order_shipment_collection')
                ->load();

        $fef = array();
        if ($shipments && sizeof($shipments) > 0) {
            foreach ($shipments as $shipment) {
                $tracknums = '';
                foreach ($shipment->getAllTracks() as $tracknum) {
                    $tracknums .= $tracknum->getNumber() . ' ';
                }
                $orderId = Mage::getModel('sales/order')->load($shipment->order_id)->getIncrementId();
                $fef[$orderId] = trim($tracknums);
            }
        }

        $this->addColumn('fef_so', array(
            'header' => Mage::helper('core')->__('FEF SO'),
            'index' =>'increment_id',
            'type'=>'options',
            'options'=>$fef
        ));

        $this->addColumn('price', array(
            'header' => Mage::helper('core')->__('Price'),
            'index' => 'subtotal',
            'type' => 'currency',
            'currency' => 'base_currency_code',
        ));

        $this->addColumn('price_gst', array(
            'header' => Mage::helper('core')->__('Price w/gst'),
            'index' => 'base_subtotal_incl_tax',
            'type' => 'currency',
            'currency' => 'base_currency_code',
        ));

        $this->addColumn('delviery', array(
            'header' => Mage::helper('core')->__('Delivery'),
            'index' => 'base_shipping_amount',
            'filter_index' => 'main_table.base_shipping_amount',
            'type' => 'currency',
            'currency' => 'base_currency_code',
        ));

        $this->addColumn('delvery_gst', array(
            'header' => Mage::helper('core')->__('Delivery w/gst'),
            'index' => 'base_shipping_tax_amount',
            'filter_index' => 'main_table.base_shipping_tax_amount',
            'type' => 'currency',
            'currency' => 'base_currency_code',
        ));

        $this->addColumn('grand_total', array(
            'header' => Mage::helper('core')->__('Grand Total'),
            'index' => 'base_grand_total',
            'filter_index' => 'main_table.base_grand_total',
            'type' => 'currency',
            'currency' => 'base_currency_code',
        ));

        $this->addColumn('payment', array(
            'header' => Mage::helper('core')->__('Payment'),
            'index' => 'method',
            'filter_index' => 'sfop.method'
        ));

        $this->addColumn('receiver', array(
            'header' => Mage::helper('core')->__('Receiver'),
            'index' => 'shipping_name',
            'filter_index' => 'sfog.shipping_name'
        ));

        $this->addColumn('address', array(
            'header' => Mage::helper('core')->__('Address'),
            'index' => 'street'
        ));

        $this->addColumn('postal_code', array(
            'header' => Mage::helper('core')->__('Postal Code'),
            'index' => 'postcode',
            'filter_index' => 'sfoa.postcode',
        ));

        $this->addColumn('_remarks', array(
            'header' => Mage::helper('core')->__('Remarks'),
        ));

       $this->addExportType('*/*/exportCsv', Mage::helper('sales')->__('CSV'));
       $this->addExportType('*/*/exportXml', Mage::helper('sales')->__('XML'));
	   
		
        return parent::_prepareColumns();
    }

    public function getRowUrl($row) {
        return $row->getStatus();
        return;
    }

    public function _prepareMassaction() {
        $this->getMassactionBlock()->addItem('export', array(
            'label' => Mage::helper('catalog')->__('Export to CSV'),
            'url' => $this->getUrl('*/*/massExport', array('_current' => true)),
        ));
    }
/*override function getCsv() from widget/grid :write by Vanle*/
    /*                                                                  */
    /*                                                                 */
    /*                                                                 */
     /**
     * Retrieve Grid data as CSV
     *
     * @return string
     */
    public function getCsv($fields =array())
    {        
        $csv = '';
        $this->_isExport = true;
        $this->_prepareGrid();
        $this->getCollection()->getSelect()->limit();
        $this->getCollection()->setPageSize(0);
        $this->getCollection()->load();
        $this->_afterLoadCollection();

        $data = array();
        foreach ($this->_columns as $index => $column) {            
            if(sizeof($fields)==0 || (sizeof($fields)>0 && in_array($index, $fields))){
                if (!$column->getIsSystem()) {
                    $data[] = '"'.$column->getExportHeader().'"';
                }
            }
        }
        $csv.= implode(',', $data)."\n";

        foreach ($this->getCollection() as $item) {
            $data = array();
            foreach ($this->_columns as $index => $column) {
                if(sizeof($fields)==0 || (sizeof($fields)>0 && in_array($index, $fields))){
                    if (!$column->getIsSystem()) {
                        $data[] = '"' . str_replace(array('"', '\\'), array('""', '\\\\'),
                            $column->getRowFieldExport($item)) . '"';
                    }
                }
            }
            $csv.= implode(',', $data)."\n";
        }

        if ($this->getCountTotals())
        {
            $data = array();
            foreach ($this->_columns as $column) {
                if (!$column->getIsSystem()) {
                    $data[] = '"' . str_replace(array('"', '\\'), array('""', '\\\\'),
                        $column->getRowFieldExport($this->getTotals())) . '"';
                }
            }
            $csv.= implode(',', $data)."\n";
        }

        return $csv;
    }
    
    /*override function getXml() from widget/grid :write by Vanle*/
    /*                                                                  */
    /*                                                                 */
    /*                                                                 */
     
    public function getXml($fields =array())
    {
        $this->_isExport = true;
        $this->_prepareGrid();
        $this->getCollection()->getSelect()->limit();
        $this->getCollection()->setPageSize(0);
        $this->getCollection()->load();
        $this->_afterLoadCollection();
        $indexes = array();
        foreach ($this->_columns as $index =>$column) {
            if(sizeof($fields)==0 || (sizeof($fields)>0 && in_array($index, $fields))){
            if (!$column->getIsSystem()) {
                $indexes[] = $column->getIndex();
            }
        }
        }
//        var_dump($indexes);
//        exit();
        $xml = '<?xml version="1.0" encoding="UTF-8"?>';
        $xml.= '<items>';
        foreach ($this->getCollection() as $item) {           
            $xml.= $item->toXml($indexes);
        }       
        
        if ($this->getCountTotals())
        {
            $xml.= $this->getTotals()->toXml($indexes);
        }
        $xml.= '</items>';
        return $xml;
    }
  
}